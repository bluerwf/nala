#! /usr/bin/env python

import sys
import os
import logging

import nala.mof as mof
from nala.parse import list_commands, mof_parse, NalaHTMLParser

from optparse import OptionParser


USAGE = """%prog [options] <command> 

Commands:
""" + '\n'.join(["\t %s" % x for x in list_commands()])

VERSION = "%prog 1.0"


class NalaCompare(object):
	"""To implement the comparsion between 
	mof file and html files. Need one mof file and
	one html file at least."""
	def __init__(self, mof, html=None, dirpath=None, logpath="/tmp/", report=False):
		super(NalaCompare, self).__init__()
		self.mof = mof
		self.html = html
		self.dir = dirpath
		self.logpath = logpath
		self.result = {}
		self.report = report
		self.logger = mof.NalaLog(self.logpath).get_logger()

	def compare(self, moffile, htmlfile):

		mof_store = None
		html_store = None

		mof_file = os.path.abspath(moffile)

		html_file = os.path.abspath(htmlfile)

		if os.access(mof_file, os.R_OK):
			mof_store = mof_parse(mof_file)

		if os.access(self.html, os.R_OK):
			html_store = mof.MOFStore(html_file)
			html_parser = NalaHTMLParser()
			html_parser.set_store(html_store)
			html_store = html_parser.parse(html_file, 'split')

		if self.logger.level > 0:
			self.logger.info(mof_store.store_name)
			for each in mof_store.get_mof():
				self.logger.info(each.get_mof_info())
			self.logger.info(html_store.store_name)

			for class_name in html_store.store:
				for each in html_store.get_mof(class_name):
					self.logger.info(each.get_mof_info())

		if mof_store and html_store:
			for each_class in mof_store.store:
				if each_class in html_store.store:
					for each_inst in mof_store.get_mof(each_class):
						if each_inst == html_store.get_mof(each_class):
							mof_store.store[each_class].pop(each_inst)
							html_store.store[each_class].pop(each_inst)
					if len(mof_store.get_mof(each_class) == 0:
						self.logger.info("%s of mof equals to %s of html" % (each_class, each_class))
						self.result[each_class] = "PASS"
					else:
						self.result[each_class] = "FAIL"
						self.logger.info("%s of mof differs with %s of html"%(each_class, each_class))
						self.logger.info("Details: %s"% mof_store.get_mof(each_class)[0].get_mof_info()[0])
						for x in mof_store.get_mof(each_class)[0].get_mof_info()[1]:
							self.logger.info("Details: %s"% mof_store.get_mof(each_class)[0].get_mof_info()[0][x])
						self.logger.info("Details: %s"% html_store.get_mof(each_class)[0].get_mof_info()[0])
					    for x in html_store.get_mof(each_class)[0].get_mof_info()[1]:
							self.logger.info("Details: %s"% html_store.get_mof(each_class)[0].get_mof_info()[0][x]))

			for each_result in self.result:
				self.logger.info("Result: %s"%self.result[each_result])

		return self.result

	def compare_dir(self, moffile, htmldir):
		if os.access(htmldir, R_OK):
			html_files = os.listdir(htmldir)
			if len(html_files) > 0:
				for each_file in html_files:
					self.compare(moffile, os.path.abspath(each_file))
		else:
			self.logger.error("%s does not exist"%htmldir)

	def report(self, formatter=None):

		if formatter:
			pass
		elif formatter is None:
			pass_num = 0
			fail_num = 0
			def add_count(result):
				if result == "PASS":
					return pass_num += 1
				elif result == "FAIL":
					return fail_num += 1
				else:
					return 0
			for each_result in self.result:
				add_count(each_result)

			if fail_num > 0:
				print "Test failed: "
				print "PASS: %d " % pass_num
				print "Failed %d " % fail_num

def main():

	parser = OptionParser(USAGE, version=VERSION)

	parser.add_option('-p', '--path', type="string", dest="dirname",
                      action="store", default=None, help="html files in the directory")
	parser.add_option(
    	'-f', '--htmlfile', type="string", dest="htmlfile", action="store",
        default=None, help="files to be compared")
	parser.add_option(
        '-m', '--moffile', type="string", dest="moffile", action="store",
        default=None, help="files to be compared")
	parser.add_option(
        '-l', '--logpath', type="string", dest="logpath", action="store",
        default="/tmp", help="log path to output logs")
	parser.add_option('-v', action="store_true",
                      dest="verbose", help="output verbose report")
	parser.add_option(
        '-d', action="store_true", dest="debug", help="Debug mode")


	options, args = parser.parse_args()

	if options.debug:
		import pdb
		pdb.set_trace()

	if len(args) != 1:
		parser.print_help()
		exit(1)
	if options.dirname and options.htmlfile:
		parser.error("options -d and -f are mutually exclusive!")

	command = args[-1]

	compare = NalaCompare(options.moffile, options.htmlfile, options.dirname,
	                      options.logpath, options.verbose)

	if options.dirname is None and options.htmlfile:
		compare.compare(options.moffile, options.htmlfile)
	elif options.dirname:
		compare.compare_dir(options.dirname, options.htmlfile)

	compare.report()


if __name__ == '__main__':

	main()
